{"version":3,"file":"js/259.8ae29a73.js","mappings":"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","sources":["webpack://agents/./src/components/directed/Visu.vue?b92a","webpack://agents/src/components/directed/Visu.vue","webpack://agents/./src/components/directed/Visu.vue?2c1d","webpack://agents/./src/components/directed/Visu.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.paths.length>0)?_c('div',[_vm._v(\"Exploring \"+_vm._s(_vm.paths.length)+\" paths. \")]):_vm._e(),_c('CommandInput'),(_vm.navigation == 'preview' && _vm.currentNode != null)?_c('Node'):_vm._e(),_c('Graph',{attrs:{\"nodes\":_vm.nodes,\"links\":_vm.links,\"graphNeedUpdate\":_vm.graphNeedUpdate},on:{\"update\":function($event){_vm.graphNeedUpdate = $event;}}}),_vm._v(\" \"+_vm._s(_vm.pod)+\" \")],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n\n    <div v-if=\"paths.length>0\">Exploring {{ paths.length }} paths.\n      <!-- <div v-if=\"paths.length <3\"> {{ paths}}</div> -->\n    </div>\n    <CommandInput />\n    <Node v-if=\"navigation == 'preview' && currentNode != null\" />\n    <Graph :nodes=\"nodes\" :links=\"links\" :graphNeedUpdate=\"graphNeedUpdate\" @update=\"graphNeedUpdate = $event;\" />\n\n    {{ pod }}\n    <!-- <Comunica /> -->\n    <!-- <Hello /> -->\n  </div>\n</template>\n\n<script>\n// import externalComponent from '@/utils/external-component';\n//\n// const Hello = () => externalComponent('https://components.solidcommunity.net/public/hello/Hello.bdd71b8bbb487af4de05.umd.min.js');\n\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  name: \"Visu\",\n  components: {\n    // 'ThreeScene': () => import('@/components/three/ThreeScene'),\n    'Graph': () => import('@/components/directed/Graph'),\n    // 'Comunica': () => import('@/components/dev/Comunica'),\n    'CommandInput': () => import('@/components/directed/CommandInput'),\n    'Node': () => import('@/components/ui/Node'),\n\n    // Hello\n    // HelloWorld\n  },\n  data(){\n    return{\n      //  nodes: [],\n      links: [],\n      paths: [],\n      jump: 0,\n      graphNeedUpdate : false,\n      gunCpt : 0,\n      gunNodes : {},\n      gunLinks: []\n\n    }\n  },\n  mounted(){\n    console.log(\"MUST TAKE A LOOK AT COMMUNICA !\")\n    this.showWorlds()\n  },\n  methods: {\n    async explore2(path){\n      console.log(path)\n\n    },\n    onInputObjectChange(data){\n      console.log(\"onCommand\",data)\n      let nodeSubject, nodeObject, edge\n      switch (data.type) {\n        case 'triplet':\n        nodeSubject = this.nodeFromLabel(data.value.subject)\n        this.saveNode(nodeSubject)\n        nodeObject = this.nodeFromLabel(data.value.object)\n        this.saveNode(nodeObject)\n        console.log(nodeSubject.id, nodeObject.id)\n        edge = this.edgeFromLabel({source: nodeSubject.id, target: nodeObject.id, label: data.value.predicate})\n        console.log(edge)\n        this.saveEdge(edge)\n        data.triple = {subject: nodeSubject, edge: edge, object: nodeObject}\n        this.$saveToGun(data)\n        break;\n        case 'url':\n        console.log(data)\n        break;\n        default:\n        console.log(\"TODO\",data)\n      }\n    },\n    saveNode(n){\n      var index = this.nodes.findIndex(x => x.id==n.id);\n      index === -1 ? this.nodes.push(n) : Object.assign(this.nodes[index], n)\n      this.sendUpdate(n)\n    },\n    saveEdge(e){\n      console.log(e)\n      console.log(this.links)\n      this.links.push(e)\n      //  var index = this.links.findIndex(x => x.id==e.id);\n      //index === -1 ? this.links.push(e) : Object.assign(this.links[index], e)\n      console.log(this.nodes, this.links)\n      this.sendUpdate(e)\n    },\n    // nodeFromLabelVis(label) {\n    //   return {id: \"#\"+label.trim().split(' ').join('_'),\n    //   label: label,\n    //   color: {  background: '#D2E5FF', border: '#2B7CE9'},\n    //   shape: 'ellipse'}\n    // },\n    nodeFromLabel(label) {\n      let id = \"#\"+label.trim().split(' ').join('_')\n      return {id: id , name: label,   age: 0,\n        type: \"neurone\"/*, color: \"#D2E5FF\"*//*, type: \"storage\"*/}\n      },\n      edgeFromLabel(data){\n        console.log(data)\n        return { source: data.source, target: data.target, label: data.label}\n      },\n      // edgeFromLabelVis(data){\n      //   return { from: data.from, to: data.to, label: data.label}\n      // },\n      async sendUpdate(p){\n        console.log(p)\n        //  console.log(this.url)\n        //  console.log(this.network)\n        console.log(\"le json\", this.json)\n\n\n        // if(this.json != undefined && this.json[\"@context\"] != \"https://data.virtual-assembly.org/context.json\"){\n        //   console.log(\"TODO must send only if different \")\n        //   let identiques = this.arraysEqual(this.json.nodes, this.network.nodes) && this.arraysEqual(this.json.edges, this.network.edges)\n        //   console.log(\"identiques\",identiques)\n        //   if (identiques == false && this.url != undefined){\n        //     this.json.nodes = this.network.nodes\n        //     this.json.edges = this.network.edges\n        //     this.json.modified = new Date()\n        //     console.log(this.json)\n        //\n        //     await fc.createFile( this.json.url, JSON.stringify(this.json), \"application/ld+json\" ).then(\n        //       f => {\n        //         console.log(f)\n        //       });\n        //     }\n        //   }\n\n      },\n      async exploreFriends(pod){\n        let app = this\n        app.jump ++\n\n        pod.friends.forEach(async function(f){\n          console.log(f)\n          try{\n            if (f.webId != undefined){\n              let friendNode = {url: f.webId, name: f.webId, type: \"friend\", color: \"#00ff00\", webId: f.webId}\n              console.log(friendNode)\n              let p = await app.$getPodInfos(friendNode)\n              console.log(p)\n              let exist = app.nodes.find(x => x.url == friendNode.url)\n              console.log(\"exist\", exist)\n              exist == undefined ? app.nodes.push(friendNode) : \"\"\n              // app.nodes.push(friendNode)\n              app.links.push({source: pod.webId, target: f.webId, label: \"friend\"})\n              let storageNode = {url: p.storage, name: \"storage\", color: \"#ffff00\", type: \"storage\"}\n              app.nodes.push(storageNode)\n              app.links.push({source: f.webId, target: p.storage, label: \"storage\"})\n              console.log(app.jump)\n            }{\n              console.log(\"webId undefined\", f.webId)\n            }\n            // if (app.jump <4){\n            //   app.exploreFriends(p)\n            // }\n          }catch(e){\n            console.log(e)\n          }\n          //   try{\n          //   let friendNode = {url: f.webId, name: f.webId, type: \"friend\", color: \"#00ff00\", webId: f.webId}\n          //   app.nodes.push(friendNode)\n          //   app.links.push({source: pod.webId, target: f.webId, label: \"friend\"})\n          //\n          //\n          //   let p = await app.$getPodInfos(friendNode)\n          //   console.log(p)\n          //   let storageNode = {url: p.storage, name: \"storage\", color: \"#ffff00\", type: \"storage\"}\n          //   app.nodes.push(storageNode)\n          //   app.links.push({source: f.webId, target: p.storage, label: \"storage\"})\n          //   //   app.explore(p.storage)\n          //\n          //   if (app.jump <7){\n          //     app.exploreFriends(p)\n          //\n          //\n          //   }\n          // }catch(e){\n          //   console.log(e)\n          // }\n\n\n\n\n          // let f_pod = {webId: f}\n          // console.log(f)\n          // let pod = await app.$getPodInfos(f_pod)\n          // console.log(\"Friend\", pod)\n        })\n      },\n      async explore(path){\n        console.log(path)\n        if (path.endsWith('card#me')){\n          let p = await this.$getPodInfos({webId: path})\n          path = p.storage\n          this.exploreFriends(p)\n        }\n        let app = this\n        let resources = await this.$getResources(path)\n        if (resources.compacted != undefined){\n          this.processJsonld(resources)\n        }else{\n          resources.forEach(async function(r){\n\n            if(r.type == \"file\"){\n              console.log(\"on entre ici\", r)\n              await app.$getResource(r)\n              let compacted = await app.$getJsonLd(r.url)\n              console.log(compacted)\n            }\n            console.log(r)\n            app.nodes.push(r)\n            app.links.push({source: path, target: r.url})\n            // if (r.url.endsWith('/')){\n            // if (resources.length < 20){\n            //   console.log(\"on continue ici, mais c'est pas propre, juste pour attraper le jsonld\",r.url)\n            //   app.explore(r.url)\n            // }\n\n            // }\n\n          })\n        }\n      },\n      processJsonld(data){\n        // let compacted = data.compacted\n        let url = `${data.compacted.url}`\n        //  console.log(url)\n        let index = -1\n        for (let i = 0; i < this.nodes.length; i++){\n          let n = this.nodes[i]\n          //  console.log(n)\n          //  console.log(i, n.url, n.url == url)\n          if (n.url == url){\n            index = i\n            //  console.log(\" trouv index\", index)\n            Object.assign(this.nodes[index], data.compacted)\n            this.graphNeedUpdate = true\n            // return\n            //return it does not work if i return\n          }\n        }\n\n        // FINDINDEX NOT WORK, why ?\n        // var index = this.nodes.findIndex((x) => x.url === url);\n        // console.log(\"index\", index)\n        // let node = this.nodes.find(x => x.url === url)\n        // node.name = compacted.name\n        // node.age = compacted.age\n        //\n        // console.log(\"Compacted\", compacted, Array.isArray(compacted.properties))\n        // for (const [key, val] of Object.entries(compacted)){\n        //   console.log(key, \"->\", typeof val, val)\n        // }\n        // console.log(node)\n        // console.log(this.nodes)\n\n\n\n      },\n\n      async explore1(path){\n        this.paths.push(path)\n        //  console.log(\"explore\", path)\n        let resources = await this.$getResources(path)\n        console.log(resources)\n        let app = this\n        resources.forEach(function(r){\n          if (r.type == \"folder\"){\n            app.explore(r.url)\n          }else if(r.url.endsWith('.jsonld') || r.file.type == \"application/ld+json\"){\n            r.color = \"#ffff00\"\n            const reader = new FileReader();\n            reader.onload = async () => {\n              //  console.log(reader.result)\n              r.jsonld = JSON.parse(reader.result)\n              r.name = r.jsonld[\"name\"]\n              console.log(\"jsonld\",r.jsonld['properties'])\n              for (const p of r.jsonld['properties']){\n                console.log(p)\n                for (const v of p.values){\n                  console.log(v)\n                }\n\n              }\n              // if (getContentType(file) == 'application+json'){\n              //   content = JSON.parse(reader.result);\n              // }\n              // console.log(\"content\",content)\n              // store.commit('bureau/setContent',content)\n            };\n            reader.onerror = (error) => {\n              console.log(error);\n            };\n            reader.readAsText(r.file);\n\n\n          }else if(r.url.endsWith('.ttl')){\n            r.color = \"#00ff00\"\n          }\n          if(r.name == \"inbox\"){\n            r.color = \"#ffffff\"\n          }\n          app.nodes.push(r)\n          app.links.push({source: path, target: r.url})\n\n        })\n        this.paths = this.paths.filter(e => e !== path);\n      },\n      showWorlds(){\n        console.log(this.worlds)\n\n        this.savedWorld = {nodes: this.nodes, links: this.links}\n        this.nodes = []\n        this.links = []\n        Object.assign(this.nodes, this.worlds)\n        this.nodes.push({id:\"worlds\", name: \"Worlds\", color: \"#ffff00\", type: \"univers\"})\n        this.worlds.forEach((w) => {\n          let exist = this.nodes.find(x => x.id === w.status)\n          // console.log(\"exist ? \", exist)\n          let color = w.status == \"enabled\" ? \"#00ff00\" : \"#ff0000\"\n          exist ==  undefined ? this.nodes.push({id:w.status, name: w.status, color: color, type: \"status\"}) : \"\"\n          this.links.push({source: w.id, target: w.status, label: \"status\"})\n          this.links.push({source: \"worlds\", target: w.status, })\n        });\n\n\n      },\n      gunNodeLoop1(o, parent_id){\n        console.log(o,parent_id)\n        let parent =  this.nodes.find(x => x.id==parent_id);\n        console.log(\"node parent\", parent)\n        let id =  uuidv4()\n        let node = {id: id}\n\n        for (const [key, value] of Object.entries(o)){\n          console.log(key, typeof value, value)\n          switch (typeof value) {\n            case 'string':\n            case 'number':\n            case 'boolean':\n            parent[key] = value\n            var index = this.nodes.findIndex(x => x.id==parent.id);\n            index === -1 ? this.nodes.push(parent) : Object.assign(this.nodes[index], parent)\n            break;\n            case 'object':\n            this.nodes.push(node)\n            this.links.push({source: parent_id, target: node.id, label: key})\n            this.gunNodeLoop(value, node.id)\n            break;\n            default:\n            console.log(\"no handler for \", typeof value)\n\n          }\n\n\n        }\n\n        // console.log(\"parent\", parent)\n        // for (const [key, value] of Object.entries(o)){\n        //   console.log(key, value)\n        //   let n = {id: key, name: key}\n        //   var index = this.nodes.findIndex(x => x.id==n.id);\n        //   index === -1 ? this.nodes.push(n) : Object.assign(this.nodes[index], n)\n        // //  this.links.push({source: parent, target: n.id, label: key})\n        //   if(typeof value == 'object'){\n        //     console.log(\"object\", value)\n        //     this.gunNodeLoop(value, key)\n        //   }else{\n        //     console.log(\"string\", key, value)\n        //   }\n        // }\n      },\n      readGunNode(soul, gunCpt){\n        gunCpt ++\n        let app = this\n        console.log(gunCpt, \"soul\",soul)\n        let n = {id: soul, name: soul}\n        this.gunNodes[soul] = n\n        var index = this.nodes.findIndex(x => x.id==n.id);\n        // console.log(\"index\", index, n)\n        index === -1 ? this.nodes.push(n) : Object.assign(this.nodes[index], n)\n        //\n        // let app = this\n\n        // if (this.gunCtp < 20){\n        console.log(gunCpt  , Object.entries(app.gunNodes).length)\n        if (gunCpt < 3 && Object.entries(app.gunNodes).length <50){\n        this.$gun.get(soul).map((gunNode, key) => {\n\n          if(gunNode != null && gunNode._ != undefined){\n            //console.log(gunCpt, \"-node\",gunNode)\n            let newSoul = gunNode._['#']\n            //console.log(\"newSoul\",newSoul)\n\n            this.readGunNode(newSoul, gunCpt)\n\n            // console.log(\"<-\",app.links)\n\n            let link = {source: soul, target: newSoul, label: key }\n            //  console.log(link)\n            app.gunLinks.push(link)\n          }else{\n            //  console.log(gunCpt, \"--pas de soul\", gunNode)\n            gunNode != null ? this.gunNodes[soul][key] = gunNode : \"\"\n          }\n\n        })\n          }\n        //console.log(gunCpt,\"-->\",this.gunNodes, links)\n        for (const n of Object.values(this.gunNodes)){\n          var index2 = this.nodes.findIndex(x => x.id==n.id);\n          //  console.log(\"index\", index2, n)\n          index2 === -1 ? this.nodes.push(n) : Object.assign(this.nodes[index2], n)\n        }\n\n        // links.forEach((l) => {\n        //   this.links.push(l)\n        // });\n\n        // this.nodes.push(node)\n        // console.log(this.nodes)\n        console.log(\"done read gun\")\n          this.graphNeedUpdate = true\n        // }\n      }\n\n    },\n    watch:{\n      gunNode1(){\n        let gunCpt = 0\n        // let app = this\n        this.gunNodes = {}\n        this.readGunNode(this.gunNode.id, gunCpt)\n        console.log(\"DONEGUN \")\n\n        // setTimeout(function () {\n        //\n        //   for (const l of app.gunLinks) {\n        //     console.log(l)\n        //     try{\n        //       app.links.push(l)\n        //       console.log(app.links.length)\n        //     }catch(e){\n        //       console.log(e)\n        //     }\n        //\n        //   }\n        //\n        // }, 5000);\n        //     this.graphNeedUpdate = true\n\n\n      },\n      gunNode(){\n        console.log(this.gunNode)\n        // this.gunNodes = []\n        // this.nodes = []\n        // this.links = []\n        var index = this.nodes.findIndex(x => x.id==this.gunNode.id);\n        index === -1 ? this.nodes.push(this.gunNode) : Object.assign(this.nodes[index], this.gunNode)\n\n        // let app = this\n        if(this.gunNode.type == 'brain'){\n          // this.$gun.get(this.currentNode.id).open((doc) => {// listen / on\n          this.$gun.get(this.gunNode.id).load((doc) => { // once\n            console.log(\"doc\", doc)\n          //  app.gunNodeLoop(doc.object, this.gunNode.id)\n            console.log(\"done\")\n            //this.graphNeedUpdate = true\n          });\n\n        }\n\n      },\n\n      async pod(){\n        if (this.pod != null){\n          console.log(this.pod)\n          //  let app = this\n          let storageNode = {url: this.pod.storage, name: \"storage\", color: \"#ffff00\", type: \"storage\"}\n          this.nodes.push(storageNode)\n          let webIdNode = {url: this.pod.webId, name: this.pod.name || this.pod.webId, color: \"#ff0000\", type: \"webId\"}\n          this.nodes.push(webIdNode)\n          this.links.push({source: this.pod.webId, target: this.pod.storage, label: \"storage\"})\n          this.explore(this.pod.storage)\n          this.exploreFriends(this.pod)\n        }else{\n          this.nodes = []\n          this.links = []\n        }\n\n      },\n      mustExplore(){\n        if(this.mustExplore != null){\n          console.log(\"mustExplore\", this.mustExplore)\n          let exist = this.nodes.find(x => x.url = this.mustExplore)\n          let url = this.mustExplore\n          console.log(\"exist ? \", exist)\n          exist ==  undefined ? this.nodes.push({id: url, url:url, name: url, color: \"#ff00ff\", type: \"storage\"}) : \"\"\n          this.explore(this.mustExplore)\n        }\n      },\n      inputObject(){\n        this.onInputObjectChange(this.inputObject)\n      },\n      worlds(){\n        this.showWorlds()\n      }\n      // nodes(){\n      //   console.log(\"visu nodes\", this.nodes)\n      //   // this.nodes.forEach((node) => {\n      //   //   console.log(node.id, node.name, node.url)\n      //   // });\n      // },\n      // edges(){\n      //   console.log(\"visu edges\", this.edges)\n      //   // this.nodes.forEach((node) => {\n      //   //   console.log(node.id, node.name, node.url)\n      //   // });\n      // }\n    },\n    computed:{\n      pod:{\n        get () { return this.$store.state.solid.pod },\n        set (/*value*/) { /*this.updateTodo(value)*/ }\n      },\n      mustExplore:{\n        get () { return this.$store.state.app.mustExplore },\n        set (/*value*/) { /*this.updateTodo(value)*/ }\n      },\n      inputObject: {\n        get () { return this.$store.state.app.inputObject},\n        set (/*value*/) { /*this.updateTodo(value)*/ }\n      },\n      nodes:{\n        get () { return this.$store.state.nodes.nodes },\n        set (/*value*/) { /*this.updateTodo(value)*/ }\n      },\n      worlds:{\n        get () { return this.$store.state.app.worlds },\n        set (/*value*/) { /*this.updateTodo(value)*/ }\n      },\n      navigation:{\n        get () { return this.$store.state.app.navigation },\n        set (/*value*/) { /*this.updateTodo(value)*/ }\n      },\n      currentNode:{\n        get () { return this.$store.state.app.currentNode },\n        set (/*value*/) { /*this.updateTodo(value)*/ }\n      },\n      gunNode:{\n        get () { return this.$store.state.app.gunNode },\n        set (/*value*/) { /*this.updateTodo(value)*/ }\n      }\n    }\n  }\n  </script>\n\n  <style>\n\n  </style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Visu.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Visu.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Visu.vue?vue&type=template&id=35a29bc6&\"\nimport script from \"./Visu.vue?vue&type=script&lang=js&\"\nexport * from \"./Visu.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","paths","length","_v","_s","_e","navigation","currentNode","attrs","nodes","links","graphNeedUpdate","on","$event","pod","staticRenderFns","name","components","data","jump","gunCpt","gunNodes","gunLinks","mounted","console","log","showWorlds","methods","async","path","onInputObjectChange","nodeSubject","nodeObject","edge","type","source","target","label","subject","object","saveNode","n","index","findIndex","x","id","push","Object","assign","sendUpdate","saveEdge","e","nodeFromLabel","age","edgeFromLabel","app","url","color","webId","exist","resources","processJsonld","r","reader","gunNodeLoop1","parent","key","value","node","gunNodeLoop","readGunNode","$gun","get","soul","map","gunNode","newSoul","_","link","index2","watch","computed","mustExplore","inputObject","worlds","component"],"sourceRoot":""}