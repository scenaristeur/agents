{"version":3,"file":"js/685.15390e0f.js","mappings":"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","sources":["webpack://agents/./src/components/GunTest.vue?2a23","webpack://agents/src/components/GunTest.vue","webpack://agents/./src/components/GunTest.vue?5148","webpack://agents/./src/components/GunTest.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._v(\" Gun test \"),_c('hr'),_vm._v(\" gunPublicBrains : \"+_vm._s(_vm.gunPublicBrains)+\" \"),_c('hr'),_vm._v(\" gunUserBrains : \"+_vm._s(_vm.gunUserBrains)+\" \"),_c('b-input',{attrs:{\"placeholder\":\"type a command and press enter\"},on:{\"change\":function($event){return _vm.command()}},model:{value:(_vm.command_input),callback:function ($$v) {_vm.command_input=$$v},expression:\"command_input\"}}),_c('h3',[_vm._v(\"Some possible commands\")]),_vm._m(0),_vm._v(\" Result : \"+_vm._s(_vm.last)+\" \"),_c('b-input',{model:{value:(_vm.newDo),callback:function ($$v) {_vm.newDo=$$v},expression:\"newDo\"}}),_c('b-button',{on:{\"click\":_vm.add}},[_vm._v(\"Add\")]),_c('ul',_vm._l((_vm.todos),function(node,key){return _c('li',{key:key},[_vm._v(\" \"+_vm._s(key)+\" : \"+_vm._s(node.title || node.GrosTitre))])}),0),_c('b-form-textarea',{attrs:{\"id\":\"textarea\",\"placeholder\":\"Enter something...\",\"rows\":\"3\",\"max-rows\":\"6\"},on:{\"input\":_vm.updateText},model:{value:(_vm.text),callback:function ($$v) {_vm.text=$$v},expression:\"text\"}}),_c('b-input',{model:{value:(_vm.speak_text),callback:function ($$v) {_vm.speak_text=$$v},expression:\"speak_text\"}}),_c('b-button',{on:{\"click\":_vm.speak}},[_vm._v(\"Speak\")]),_vm._v(\" causette : \"+_vm._s(_vm.causette)+\" \")],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"my.object.name = truc\")]),_c('li',[_vm._v(\"cat my.object.name\")]),_c('li',[_vm._v(\"my.object.test = {\\\"og\\\": \\\"gro\\\", \\\"trif\\\": \\\"gr\\\", \\\"gft\\\": 5}\")]),_c('li',[_vm._v(\"cat my.object.test.og\")])])}]\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    Gun test\n    <hr>\n    gunPublicBrains : {{ gunPublicBrains}}\n    <hr>\n    gunUserBrains : {{ gunUserBrains}}\n\n\n\n\n    <b-input @change=\"command()\" v-model=\"command_input\" placeholder=\"type a command and press enter\" />\n    <h3>Some possible commands</h3>\n    <ul>\n      <li>my.object.name = truc</li>\n      <li>cat my.object.name</li>\n      <li>my.object.test = {\"og\": \"gro\", \"trif\": \"gr\", \"gft\": 5}</li>\n      <li>cat my.object.test.og</li>\n    </ul>\n\n    Result : {{last}}\n\n    <b-input v-model=\"newDo\" />\n    <b-button @click=\"add\">Add</b-button>\n    <!-- todos : {{ todos }} -->\n    <ul>\n      <li v-for=\"(node, key) of todos\" :key=\"key\"> {{ key }} : {{node.title || node.GrosTitre}}</li>\n    </ul>\n\n    <b-form-textarea\n    id=\"textarea\"\n    v-model=\"text\"\n    placeholder=\"Enter something...\"\n    rows=\"3\"\n    max-rows=\"6\"\n    @input=\"updateText\"\n    ></b-form-textarea>\n\n\n\n    <b-input v-model=\"speak_text\" /><b-button @click=\"speak\">Speak</b-button>\n    causette : {{ causette }}\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"GunTest\",\n  components: {\n    // 'ThreeScene': () => import('@/components/three/ThreeScene'),\n\n    // Hello\n    // HelloWorld\n  },\n  data(){\n    return{\n      todos : {},\n      newDo: \"\",\n      command_input: \"\",\n      last: {key: \"\", value: \"\"},\n      text: \"\",\n      speak_text: \"\",\n      causette : [],\n      gunUserBrains: [],\n      gunPublicBrains: []\n    }\n  },\n  mounted: function() {\n    //  let app = this\n    var newline = String.fromCharCode(13, 10);\n    // this.todos = this.$gun.get('todos')\n    this.$gun.get('RaN5Dom_todos').map().on((node, key) => {\n\n      // add results straight to the Vue component state\n      // and get updates when nodes are updated by GUN\n      this.todos[key] = node;\n      //  console.log(this.todos)\n    });\n\n    let rootBrain = {name: 'RaN5Dom_neurones'}\n    this.$gunGet(rootBrain)\n\n    this.$gun.get('RaN5Dom_text').once((node) => { // Retrieve the text value on startup\n      //console.log(node)\n      if (node != undefined){\n        this.text = node.text.replaceAll('\\\\n', newline);\n      }\n\n      // if(node == undefined) {\n      //   this.$gun.get('text').put({text: \"Write the text here\"})\n      // } else {\n      //   console.log(\"Found Node\")\n      //   app.text = node.text\n      // }\n    })\n\n    this.$gun.get('RaN5Dom_text').on((node) => { // Is called whenever text is updated\n      console.log(\"Receiving Update\")\n      console.log(node)\n\n      this.text = node.text.replaceAll('\\\\n', newline);\n    })\n\n    this.$gun.on('auth', function(u){\n      console.log(\"auth\", u)\n      //  app.updateSay()\n      // this.gunUser.get('said').map().once((say =>\n      //   console.log(say)\n      // )\n\n      //  );\n    });\n\n  },\n  methods:{\n    speak(){\n      console.log(\"speak_text\", this.speak_text)\n      if(this.gunUser == undefined){\n\n        alert (\"you should 'Gun Login' to speak! \")\n        return }\n        this.$gun.user().get('said').set(this.speak_text);\n        this.speak_text = \"\"\n      },\n      add(){\n        //  console.log(this.newDo)\n        this.$gun.get('RaN5Dom_todos').set({GrosTitre: this.newDo})\n        this.newDo = \"\"\n      },\n      command(){\n        let command = {}\n        command.fullCommand = this.command_input.trim()\n        command.commandArray = command.fullCommand.split(\" \")\n        command.first = command.commandArray[0]\n        console.log(\"command\", command)\n        if(command.commandArray[1] == '='){\n          this.set(command)\n        }\n        if(command.commandArray[0] == 'cat'){\n          this.cat(command)\n        }\n        this.command_input = \"\"\n      },\n\n\n      cat(command){\n        let app = this\n        let object = command.commandArray[1]\n\n        console.log(\"lecture de \", object )\n        let path = object.split('.')\n        let currentNode = undefined\n        for (const p of path){\n          console.log(p)\n          currentNode = currentNode == undefined ?  this.$gun.get(p) : currentNode.get(p)\n          console.log(\"current\",currentNode)\n        }\n        currentNode.once(function(data, key){\n          console.log( key, data);\n          console.log('the value is', data)\n          app.last.key = key,\n          app.last.value = data\n        });\n\n      },\n\n      set(command/*, overwrite = true*/){\n        let object = command.commandArray[0]\n        // remove object & equal sign\n        command.commandArray.splice(0, 2)\n        let value = command.commandArray.join(' ')\n        console.log(\"affectation de \", value , \"dans\", object )\n        let path = object.split('.')\n        let currentNode = undefined\n        for (const p of path){\n          console.log(p)\n          currentNode = currentNode == undefined ?  this.$gun.get(p) : currentNode.get(p)\n          console.log(\"current\",currentNode)\n        }\n        currentNode.once(function(data, key){\n          console.log( key, data);\n          console.log('the value is', data)\n        });\n\n        try {\n          value = JSON.parse(value)\n        }catch(e){\n          console.log(e)\n        }\n        finally{\n          currentNode.put(value);\n        }\n\n\n\n      },\n      updateText(){\n        console.log(\"Updating Text\", this.text)\n        this.$gun.get('RaN5Dom_text').put({text: this.text}) // Edit the value in our db\n      },\n      updateSay(){\n        let app = this\n        this.causette = []\n        this.$gun.user().get('said').map().once(say => {\n          console.log(\"SAY\", say)\n          app.causette.push(say)\n        }\n      )\n    },\n    updateUserBrains(){\n      let app = this\n      this.gunUserBrains = []\n      this.$gun.user().get('brains').map().once(brain => {\n        console.log(\"brain\", brain)\n        app.gunUserBrains.push(brain)\n      }\n    )\n    console.log(\"user brains\", this.gunUserBrains)\n    this.$store.commit('app/setBrainGroup', {world: \"gun\", privacy: \"user\", brains: this.gunUserBrains})\n  },\n  updatePublicBrains(){\n    let app = this\n    this.gunPublicBrains = []\n    this.$gun.get('brains').map().once(brain => {\n      console.log(\"brain\", brain)\n      app.gunPublicBrains.push(brain)\n    }\n  )\n  console.log(\"public brains\", this.gunPublicBrains)\n  this.$store.commit('app/setBrainGroup', {world: \"gun\", privacy: \"public\", brains: this.gunPublicBrains})\n}\n\n},\nwatch:{\n  gunUser(){\n    console.log(\"gunUser\",this.gunUser)\n    if (this.gunUser != undefined){\n      this.updateSay()\n      this.updateUserBrains()\n      this.updatePublicBrains()\n    }\n  },\n  world(){\n    console.log(this.world)\n    this.gunPublicBrains = []\n    if (this.world == \"gun\"){\n      this.updatePublicBrains()\n    }\n  }\n},\ncomputed:{\n  gunUser:{\n    get () { return this.$store.state.gun.gunUser },\n    set (/*value*/) { /*this.updateTodo(value)*/ }\n  },\n  world:{\n    get () { return this.$store.state.app.world },\n    set (/*value*/) { /*this.updateTodo(value)*/ }\n  },\n}\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GunTest.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GunTest.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GunTest.vue?vue&type=template&id=09d472a5&\"\nimport script from \"./GunTest.vue?vue&type=script&lang=js&\"\nexport * from \"./GunTest.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","_v","_s","gunPublicBrains","gunUserBrains","attrs","on","$event","command","model","value","callback","$$v","command_input","expression","_m","last","newDo","add","_l","node","key","title","GrosTitre","updateText","text","speak_text","speak","causette","staticRenderFns","name","components","data","todos","mounted","newline","String","fromCharCode","$gun","get","map","rootBrain","$gunGet","once","undefined","replaceAll","console","log","u","methods","alert","cat","currentNode","app","set","updateUserBrains","user","brain","push","world","privacy","brains","updatePublicBrains","watch","gunUser","computed","component"],"sourceRoot":""}